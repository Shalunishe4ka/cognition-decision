import { createContext, useCallback, useContext, useEffect, useRef, useState } from 'react'
import { jwtDecode } from "jwt-decode";
import gameOverSoundSrc from "./assets/sounds/gameOver.mp3";
import hoverSoundSrc from "./assets/sounds/clearSection.mp3";

import {
  calculateScore,
  getUserUuidFromToken,
  loadDefaultCoordinatesAPI,
  loadUserCoordinatesAPI,
  saveGraphSettingsDefaultAPI,
  saveUserGraphSettingsAPI,
  resetGame,
} from "./clientServerHub"
const CustomStatesContext = createContext();
export const useCustomStates = () => useContext(CustomStatesContext);

export const CustomStatesProvider = ({ children }) => {
  const [graphData, setGraphData] = useState(null);
  const [highlightedNode, setHighlightedNode] = useState(null);
  const [selectedNodes, setSelectedNodes] = useState([]);
  const [selectedEdges, setSelectedEdges] = useState([]);
  const [isRunning, setIsRunning] = useState(false)
  const [stopwatchHistory, setStopwatchHistory] = useState([]);
  const [showNodeList, setShowNodeList] = useState(false);
  const [lockedNodes, setLockedNodes] = useState({});
  const [showHistoryModal, setShowHistoryModal] = useState(false);
  const [moveHistory, setMoveHistory] = useState([]);
  const [lastIndex, setLastIndex] = useState(0);
  const [hoveredNode, setHoveredNode] = useState(null);
  const [cursorPosition, setCursorPosition] = useState({ x: 0, y: 0 });
  const [showModal, setShowModal] = useState(false);
  const [serverResponseData, setServerResponseData] = useState(null);
  const [score, setScore] = useState(0);
  const [maxScorePerMove, setMaxScorePerMove] = useState(0);
  const [isClosing, setIsClosing] = useState(false);
  const [showGameOverModal, setShowGameOverModal] = useState(false);
  const [movesHistory, setMovesHistory] = useState([]);
  const [disabledNodes, setDisabledNodes] = useState([]);
  const [matrixInfo, setMatrixInfo] = useState({});
  const [positiveEdgeColor, setPositiveEdgeColor] = useState("#00FF00");
  const [negativeEdgeColor, setNegativeEdgeColor] = useState("#FF0000");
  const [physicsEnabled, setPhysicsEnabled] = useState(false);
  const [nodeSize, setNodeSize] = useState(40);
  const [edgeRoundness, setEdgeRoundness] = useState(0.15);
  const [smallTableData, setSmallTableData] = useState([]);
  const [hugeTableData, setHugeTableData] = useState([]);
  const [syntheticData, setSyntheticData] = useState([]);
  const [isNetworkReady, setIsNetworkReady] = useState(false);
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  // [CAT LOGIC] - —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è "–ø–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ç–∞" –∏ "—É–∂–µ –∑–∞–ø—É—Å—Ç–∏–ª–∏ –∫–æ—Ç–∞"
  const [showCat, setShowCat] = useState(false);
  const [catAnimationLaunched, setCatAnimationLaunched] = useState(false);
  const [isHoveredStart, setIsHoveredStart] = useState(false);
  const [isHoveredStop, setIsHoveredStop] = useState(false);
  const [showPreviewWindow, setShowPreviewWindow] = useState(true); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∫–Ω–∞ "–ò—Å—Å–ª–µ–¥—É–π—Ç–µ –≥—Ä–∞—Ñ"
  const [prevScores, setPrevScores] = useState([]); // –•—Ä–∞–Ω–∏–º –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ –æ—á–∫–∏ –Ω–∞ –º–æ–º–µ–Ω—Ç –∫–∞–∂–¥–æ–≥–æ —Ö–æ–¥–∞
  const [history, setHistory] = useState([]);

  // –¢–µ–∫—É—â–∏–π —é–∑–µ—Ä
  // const [userUuid, setuserUuid] = useState(localStorage.getItem("currentUser") || "defaultUser");
  // –¶–≤–µ—Ç —É–∑–ª–æ–≤
  const [nodeColor, setNodeColor] = useState("#0e0a20");

  // –î–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏/–æ—à–∏–±–æ–∫
  const [error, setError] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  // –î–ª—è VerticalProgressBar
  const [currentTime, setCurrentTime] = useState(0);
  // maxTime ‚Äî –¥–æ–ø—É—â–µ–Ω–∏–µ, —á—Ç–æ —ç—Ç–æ –≤—Ä–µ–º—è –Ω–∞ —Ä–∞—É–Ω–¥/—É—Ä–æ–≤–µ–Ω—å
  const maxTime = 600;
  const [progress, setProgress] = useState(0);

  // –ü–∞—Ä–∞ –ø–ª–∞–Ω–µ—Ç–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
  const [selectedPlanet, setSelectedPlanet] = useState(null);
  const [hoveredPlanet, setHoveredPlanet] = useState(null);
  const [showHistory, setShowHistory] = useState(false);


  // ----- –î–æ–ø–∏—Å–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏-–∑–∞–≥–ª—É—à–∫–∏ -----

  // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è userUuid ---
  const [userUuid, setUserUuid] = useState(getUserUuidFromToken());

  const hoverSoundRef = useRef(null);
  const gameOverSoundRef = useRef(null);
  const intervalRef = useRef();
  const networkRef = useRef(null);
  const backgroundMusicRef = useRef(null);
  const containerRef = useRef(null);


  // —Ä–∞–∑–æ—á–µ–∫ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ‚Äú–ø–æ–¥—Ö–≤–∞—Ç—ã–≤–∞–µ–º‚Äù –∑–≤—É–∫–∏
  useEffect(() => {
    hoverSoundRef.current = new Audio(hoverSoundSrc);
    hoverSoundRef.current.preload = 'auto';

    gameOverSoundRef.current = new Audio(gameOverSoundSrc);
    gameOverSoundRef.current.preload = 'auto';
  }, []);

  useEffect(() => {
    const playMusic = () => {
      if (backgroundMusicRef.current) {
        backgroundMusicRef.current.play().catch(err => {
          console.warn("üéß –ú—É–∑—ã–∫–∞ –Ω–µ —Å—Ç–∞—Ä—Ç–∞–Ω—É–ª–∞ —Å–∞–º–∞ ‚Äî –Ω—É–∂–µ–Ω –∫–ª–∏–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err.message);
        });
      }
    };

    playMusic(); // –ü—ã—Ç–∞–µ–º—Å—è —Å—Ä–∞–∑—É

    // –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ ‚Äî —Å–ª—É—à–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫
    const unlockAudio = () => {
      playMusic();
      document.removeEventListener("click", unlockAudio);
    };

    document.addEventListener("click", unlockAudio);
  }, []);


  const isTokenExpired = (token) => {
    if (!token) return true;
    try {
      const decoded = jwtDecode(token);
      if (!decoded.exp) return true;

      const now = Math.floor(Date.now() / 1000); // —Å–µ–π—á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
      return decoded.exp < now; // —Ç–æ–∫–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω?
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:", error);
      return true;
    }
  };


  useEffect(() => {
    if (moveHistory.length > prevScores.length) {
      setPrevScores((prev) => [...prev, score]);
    }
  }, [moveHistory, score]);

  useEffect(() => {
    if (containerRef.current) {
      containerRef.current.scrollTop = containerRef.current.scrollHeight;
    }
  }, [prevScores]);



  useEffect(() => {
    const token = localStorage.getItem("access_token");
    if (!token || isTokenExpired(token)) {
      console.warn("–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –∏—Å—Ç—ë–∫, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –≤—ã—Ö–æ–¥");
      localStorage.removeItem("access_token");
      localStorage.removeItem("user_uuid");
      setUserUuid(null);
      // –º–æ–∂–Ω–æ –¥–∞–∂–µ –¥–µ–ª–∞—Ç—å —Ä–µ–¥–∏—Ä–µ–∫—Ç –∑–¥–µ—Å—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      // window.location.href = "/sign-in";
    }
  }, []);

  const handleClosePreviewWindow = () => {
    setIsClosing(true);
    setTimeout(() => {
      setIsClosing(false);
      setShowPreviewWindow(false);
    }, 700);
  };

  const handleClear = () => {
    setSelectedNodes([]);
  };

  const handleMakeMove = async () => {
    try {
      // console.log('–î–µ–ª–∞–µ–º —Ö–æ–¥ —Å –≤–µ—Ä—à–∏–Ω–∞–º–∏:', selectedNodes);

      if (!graphData || !graphData.nodes) {
        alert("–ì—Ä–∞—Ñ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.");
        return;
      }

      const allNodes = graphData.nodes.get();
      const availableNodesCount = allNodes.filter(node => !disabledNodes.includes(node.id)).length;

      const minRequired = availableNodesCount < 3 ? availableNodesCount : 3;

      if (selectedNodes.length < minRequired) {
        alert(`–î–ª—è —Ö–æ–¥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å –º–∏–Ω–∏–º—É–º ${minRequired} –≤–µ—Ä—à–∏–Ω.`);
        return;
      }

      // --- –°–æ–∑–¥–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤–µ—Ä—à–∏–Ω ---
      const selectedNodesDictionary = {};
      selectedNodes.forEach((nodeObj, idx) => {
        const id = typeof nodeObj === 'object' ? nodeObj.id : nodeObj; // –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ id
        selectedNodesDictionary[lastIndex + idx] = id;
      });

      // --- –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä ---
      const responseData = await calculateScore(selectedNodesDictionary, matrixInfo.matrix_info.uuid);

      if (!responseData || typeof responseData !== "object") {
        console.error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", responseData);
        return;
      }

      if (!isRunning) {
        handleStart();
      }

      const { turn_score, total_score } = responseData;

      setMoveHistory(prevHistory => [
        ...prevHistory,
        { selectedNodes: [...selectedNodes], score: turn_score },
      ]);

      const selectedIds = selectedNodes.map(n => (typeof n === 'object' ? n.id : n));
      const moveNodesData = selectedIds.map(id => graphData.nodes.get(id)).filter(Boolean);
      setMovesHistory(prevMoves => [
        ...prevMoves,
        { moveNumber: prevMoves.length + 1, nodes: moveNodesData },
      ]);

      setScore(prevScore =>
        typeof total_score === "number" && !isNaN(total_score) ? total_score : prevScore
      );

      setDisabledNodes(prev => [...new Set([...prev, ...selectedNodes])]);
      setSelectedNodes([]);
      setSelectedEdges([]);

      setLastIndex(prevLastIndex => {
        const maxIndex = Math.max(...Object.keys(selectedNodesDictionary).map(Number));
        return maxIndex + 1;
      });

      setShowHistoryModal(true);

    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ö–æ–¥–∞:", error);
      alert(`–û—à–∏–±–∫–∞: ${error.message}`);
    }
  };


  useEffect(() => {
    if (!graphData || !graphData.nodes || disabledNodes.length === 0) return;

    const allNodeCount = graphData.nodes.length || graphData.nodes.get().length;

    if (disabledNodes.length >= allNodeCount && isRunning) {
      setIsRunning(false);
      setShowGameOverModal(true);
      handleStop();
    } // eslint-disable-next-line 
  }, [disabledNodes, graphData, isRunning]);


  useEffect(() => {
    if (selectedNodes.length > 0) {
      setShowModal(true);
    } else {
      setShowModal(false);
    }
  }, [selectedNodes]);



  const handleClearEdges = () => {
    selectedEdges.forEach((edgeId) => {
      const edgeObj = graphData.edges.get(edgeId);
      if (edgeObj) {
        graphData.edges.update({
          id: edgeId,
          width: 1,
          color: {
            color: edgeObj.rawValue > 0 ? positiveEdgeColor : negativeEdgeColor,
          },
        });
      }
    });
    setSelectedEdges([]);
  };



  // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ ‚Äî –æ–±–Ω–æ–≤–∏–º userUuid, –µ—Å–ª–∏ —Ç–æ–∫–µ–Ω —Å–º–µ–Ω–∏–ª—Å—è
  useEffect(() => {
    const uuidFromToken = getUserUuidFromToken();
    if (uuidFromToken && uuidFromToken !== userUuid) {
      setUserUuid(uuidFromToken);
    }
    // eslint-disable-next-line
  }, []);



  // –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –º–æ–¥–∞–ª–∫–∞ Details
  const handleOpenModal = () => {
    setShowModal(true);
  };

  // –ü—Ä–∏–º–∏—Ç–∏–≤–Ω—ã–π —Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø –¥–ª—è Stopwatch
  const handleStart = async () => {
    if (intervalRef.current) return; // —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

    // –°–±—Ä–æ—Å –∏–≥—Ä—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ (NEW)
    try {
      if (matrixInfo && matrixInfo.matrix_info?.uuid) {
        await resetGame(matrixInfo.matrix_info.uuid);
      }
    } catch (err) {
      console.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ:", err);
    }

    // –ß–∏—Å—Ç–∏–º –ª–æ–∫–∞–ª—å–Ω—ã–µ —Å—Ç–µ–π—Ç—ã
    setIsRunning(true);
    setCurrentTime(0);
    setScore(0);
    setLastIndex(0);
    setMoveHistory([]);
    setMovesHistory([]);
    setLockedNodes({});
    setDisabledNodes([]); // –û—á–∏—Å—Ç–∏–ª–∏, —á—Ç–æ–±—ã –≤—Å–µ —É–∑–ª—ã —Å–Ω–æ–≤–∞ —Å—Ç–∞–ª–∏ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏
    setPrevScores([])
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
    intervalRef.current = setInterval(() => {
      setCurrentTime(prev => prev + 1);
    }, 1000);
  };


  const handleStop = () => {
    setIsRunning(false);
    if (intervalRef.current) {
      clearInterval(intervalRef.current);
      intervalRef.current = null;
    }

    setStopwatchHistory(prev => [
      ...prev,
      {
        currentTime,
        startTime: new Date(),
        selectedNodes: [...moveHistory],
        resscore: score,
      },
    ]);
    // setCurrentTime(0);
  };

  useEffect(() => {
    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current);
      }
    };
  }, []);


  // ==============================
  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ (—á–µ—Ä–µ–∑ uuid)
  // ==============================

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–±–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è), –ø–æ uuid.
   */
  const loadDefaultCoordinates = async (uuid) => {
    try {
      console.log("UUID –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞:", uuid, typeof uuid);
      const data = await loadDefaultCoordinatesAPI(uuid);
      const payload = Array.isArray(data) ? data[0] : data;
      return payload;
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:", error);
      return null;
    }
  };


  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ userUuid), –ø–æ uuid.
   */
  const loadUserCoordinates = async (uuid) => {
    try {
      const data = await loadUserCoordinatesAPI(uuid, userUuid);
      // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –º–∞—Å—Å–∏–≤, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
      const payload = Array.isArray(data) ? data[0] : data;
      return payload; // { graph_settings, node_coordinates }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:", error);
      return null;
    }
  };

  // ==============================
  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏
  // ==============================

  // 1. –ó–∞–≥—Ä—É–∑–∏—Ç—å (–µ—Å–ª–∏ –µ—Å—Ç—å userSettings ‚Äî –±–µ—Ä—ë–º –∏—Ö, –∏–Ω–∞—á–µ default)
  const handleLoadCoordinates = async (uuid, applyCoordinatesFn) => {
    const userData = await loadUserCoordinates(uuid);
    if (userData) {
      // console.log("–ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
      applyCoordinatesFn(userData);
    } else {
      console.warn("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, –≥—Ä—É–∑–∏–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ...");
      const defaultData = await loadDefaultCoordinates(uuid);
      if (defaultData) {
        console.log("–ó–∞–≥—Ä—É–∂–µ–Ω—ã –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏");
        applyCoordinatesFn(defaultData);
      } else {
        console.warn("–ò –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö —Ç–æ–∂–µ –Ω–µ—Ç. –ù–µ—á–µ–≥–æ –≥—Ä—É–∑–∏—Ç—å.");
      }
    }
  };


  // 2. –°–±—Ä–æ—Å (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –¥–µ—Ñ–æ–ª—Ç)
  const handleResetCoordinates = async (uuid, applyCoordinatesFn) => {
    const defaultData = await loadDefaultCoordinates(uuid);
    if (defaultData) {
      applyCoordinatesFn(defaultData);
      alert("–î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.");
    } else {
      alert("–î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
    }
  };

  // 3. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ
  const handleSaveUserView = async () => {
    if (!matrixInfo?.matrix_info?.uuid) {
      console.warn("UUID –º–∞—Ç—Ä–∏—Ü—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
      return;
    }
    if (!networkRef?.current) {
      console.warn("networkRef.current –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –≥—Ä–∞—Ñ –Ω–µ –≥–æ—Ç–æ–≤");
      return;
    }
    if (!userUuid) {
      console.warn("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω");
    }
    try {
      const nodePositions = networkRef.current.body.nodes;
      const coordinates = Object.fromEntries(
        Object.entries(nodePositions).map(([nodeId, node]) => [
          nodeId,
          { x: node.x, y: node.y },
        ])
      );

      const position = networkRef.current.getViewPosition?.() || { x: 0, y: 0 };
      const scale = networkRef.current.getScale?.() || 1;

      const dataToSave = {
        graph_settings: { position, scale },
        node_coordinates: coordinates,
      };

      await saveUserGraphSettingsAPI(matrixInfo.matrix_info.uuid, userUuid, dataToSave);
      // console.log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userUuid} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!`);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:", error);
    }
  };


  // 4. –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ
  const handleSaveDefaultView = async () => {
    if (!matrixInfo?.matrix_info?.uuid) {
      console.warn("UUID –º–∞—Ç—Ä–∏—Ü—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
      return;
    }
    if (!networkRef?.current) {
      console.warn("networkRef.current –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ‚Äî –≥—Ä–∞—Ñ –Ω–µ –≥–æ—Ç–æ–≤");
      return;
    }

    try {
      const nodePositions = networkRef.current.body.nodes;
      const coordinates = Object.fromEntries(
        Object.entries(nodePositions).map(([nodeId, node]) => [
          nodeId,
          { x: node.x, y: node.y },
        ])
      );

      const position = networkRef.current.getViewPosition?.() || { x: 0, y: 0 };
      const scale = networkRef.current.getScale?.() || 1;

      const dataToSave = {
        graph_settings: { position, scale },
        node_coordinates: coordinates,
      };

      await saveGraphSettingsDefaultAPI(matrixInfo.matrix_info.uuid, dataToSave);
      // console.log("‚úÖ –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!");
    } catch (error) {
      alert(`${error}. –≠—Ç–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ –æ–Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–∞—è!`)
      console.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:", error);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∞
  const applyCoordinates = useCallback((data) => {
    // console.log(data)
    if (!data || data.error || !networkRef?.current) {
      console.warn("–ù–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è:", data);
      return;
    }

    const { graph_settings, node_coordinates } = data;

    if (
      !graph_settings ||
      !node_coordinates ||
      typeof node_coordinates !== 'object'
    ) {
      console.warn("–î–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –Ω–µ–ø–æ–ª–Ω—ã–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ:", data);
      return;
    }

    const visNetwork = networkRef.current.body;

    Object.entries(node_coordinates).forEach(([nodeId, coords]) => {
      if (visNetwork.nodes[nodeId]) {
        visNetwork.nodes[nodeId].x = coords.x;
        visNetwork.nodes[nodeId].y = coords.y;
      }
    });

    if (graph_settings && networkRef.current.moveTo) {
      networkRef.current.moveTo({
        position: graph_settings.position || { x: 0, y: 0 },
        scale: graph_settings.scale || 1,
        animation: { duration: 1000, easingFunction: "easeInOutQuad" },
      });
    }

    networkRef.current.redraw();
    // console.log("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!");
  }, [networkRef]);

  return (
    <CustomStatesContext.Provider value={{
      // –°–æ—Å—Ç–æ—è–Ω–∏—è
      graphData, setGraphData,
      highlightedNode, setHighlightedNode,
      selectedNodes, setSelectedNodes,
      selectedEdges, setSelectedEdges,
      isRunning, setIsRunning,
      stopwatchHistory, setStopwatchHistory,
      showNodeList, setShowNodeList,
      lockedNodes, setLockedNodes,
      showHistoryModal, setShowHistoryModal,
      moveHistory, setMoveHistory,
      lastIndex, setLastIndex,
      hoveredNode, setHoveredNode,
      cursorPosition, setCursorPosition,
      showModal, setShowModal,
      serverResponseData, setServerResponseData,
      score, setScore,
      maxScorePerMove, setMaxScorePerMove,
      isClosing, setIsClosing,
      showGameOverModal, setShowGameOverModal,
      movesHistory, setMovesHistory,
      disabledNodes, setDisabledNodes,
      matrixInfo, setMatrixInfo,
      positiveEdgeColor, setPositiveEdgeColor,
      negativeEdgeColor, setNegativeEdgeColor,
      physicsEnabled, setPhysicsEnabled,
      nodeSize, setNodeSize,
      edgeRoundness, setEdgeRoundness,
      userUuid, setUserUuid,
      nodeColor, setNodeColor,
      isLoading, setIsLoading,
      error, setError,
      currentTime, setCurrentTime,
      maxTime, progress, setProgress,
      selectedPlanet, setSelectedPlanet,
      hoveredPlanet, setHoveredPlanet,
      isNetworkReady, setIsNetworkReady,
      smallTableData, setSmallTableData,
      hugeTableData, setHugeTableData,
      syntheticData, setSyntheticData,
      isMenuOpen, setIsMenuOpen,
      showCat, setShowCat,
      catAnimationLaunched, setCatAnimationLaunched,
      isHoveredStart, setIsHoveredStart,
      isHoveredStop, setIsHoveredStop,
      showPreviewWindow,
      prevScores, setPrevScores,
      showHistory, setShowHistory,
      history, setHistory,


      // –†–µ—Ñ—ã
      hoverSoundRef,
      gameOverSoundRef,
      intervalRef,
      networkRef,
      backgroundMusicRef,
      containerRef,

      // –î–æ–ø—Ñ—É–Ω–∫—Ü–∏–∏
      handleOpenModal,
      handleStart,
      handleStop,
      handleClear,
      handleMakeMove,
      handleClearEdges,
      handleClosePreviewWindow,

      // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
      loadDefaultCoordinates,
      loadUserCoordinates,
      handleLoadCoordinates,
      handleResetCoordinates,
      handleSaveUserView,
      handleSaveDefaultView,
      applyCoordinates
    }}>
      {children}
    </CustomStatesContext.Provider>
  )
}
